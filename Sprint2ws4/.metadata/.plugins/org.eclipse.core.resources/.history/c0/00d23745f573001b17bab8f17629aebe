package com.cg.ovs.domain;

import java.util.Date;

import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.Range;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;

@Entity
public class Feedback {
	
	@Id
	
	private int feedbackId;
	
	@NotNull(message = "CustomerId is required")
	private int customerId;
	
	@NotNull(message = "Rating rating is required")
	@Range(min=1, max=5, message="Rating must be given minimum  1 and maximum 5")
	private int rating;
	
	
	@NotBlank(message = "Feedback comment is required")
	@Size(min = 5 , max = 250, message= "Comment must have minimum of 5 and maximum of 250 characters")
	private String comments;
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name= "CustomerId", nullable = false )
	@JsonIgnore
	private Customer customer;
	
	
	@JsonFormat(pattern = "MM-dd-yyyy")
	private Date created_At;
	
	public Feedback() {
		super();
		// TODO Auto-generated constructor stub
	}
	public Feedback(int feedbackId,
		@NotNull(message = "Rating rating is required") @Range(min = 1, max = 5, message = "Rating must be given minimum  1 and maximum 5") int rating,
		@NotBlank(message = "Feedback comment is required") @Size(min = 5, max = 250, message = "Comment must have minimum of 5 and maximum of 250 characters") String comments,
		Date created_At, Date updated_At) {
	super();
	this.feedbackId = feedbackId;
	this.rating = rating;
	this.comments = comments;
	this.created_At = created_At;
	this.updated_At = updated_At;
}
	public Feedback(int feedbackId,
		@NotNull(message = "Rating rating is required") @Range(min = 1, max = 5, message = "Rating must be given minimum  1 and maximum 5") int rating,
		@NotBlank(message = "Feedback comment is required") @Size(min = 5, max = 250, message = "Comment must have minimum of 5 and maximum of 250 characters") String comments) {
	super();
	this.feedbackId = feedbackId;
	this.rating = rating;
	this.comments = comments;
}
	@JsonFormat(pattern = "MM-dd-yyyy")
	private Date updated_At;
	
	public int getFeedbackId() {
		return feedbackId;
	}
	public void setFeedbackId(int feedbackId) {
		this.feedbackId = feedbackId;
	}
	public int getCustomerId() {
		return customerId;
	}
	public void setCustomerId(int customerId) {
		this.customerId = customerId;
	}
//	public int getVegetableId() {
//		return vegetableId;
//	}
//	public void setVegetableId(int vegetableId) {
//		this.vegetableId = vegetableId;
//	}
	public int getRating() {
		return rating;
	}
	public void setRating(int rating) {
		this.rating = rating;
	}
	public String getComments() {
		return comments;
	}
	public void setComments(String comments) {
		this.comments = comments;
	}
	public Date getCreated_At() {
		return created_At;
	}
	public void setCreated_At(Date created_At) {
		this.created_At = created_At;
	}
	public Date getUpdated_At() {
		return updated_At;
	}
	public void setUpdated_At(Date updated_At) {
		this.updated_At = updated_At;
	}
	@PrePersist
	public void onadd() {
		this.created_At = new Date();
	}
	@PreUpdate
	public void onupdate() {
		this.updated_At = new Date();
	}
	public Customer getCustomer() {
		return customer;
	}
	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

}
